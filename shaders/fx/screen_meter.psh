SamplerState TexS0 : register(s0);
SamplerState TexS1 : register(s1);
Texture2D Texture0 : register(t0);

struct PS_INPUT {
	float4 Pos : SV_POSITION;
	float4 D0 : COLOR0;
	float4 D1 : COLOR1;
	float4 T0 : TEXCOORD0;
};

cbuffer _cb0 {
	float4 gradient_min_color	: packoffset(c0);
	float4 gradient_max_color	: packoffset(c1); // rgb = gradient_max_color, a = 1.0f/MAX(meter->gradient*8.0f, 1.0f)
	float4 flash_color			: packoffset(c2);
	float4 background_color		: packoffset(c3);
	float4 tint_color				: packoffset(c4);
	float4 alpha_min				: packoffset(c5);
}

half4 main(PS_INPUT i) : SV_TARGET
{
	half2 Tex0 = i.T0;

	half4 tex = Texture0.Sample(TexS0, Tex0.xy);
	half4 tex_point = Texture0.Sample(TexS1, Tex0.xy);

	// clip by non-interpolated alpha
	clip(tex_point.a - 0.001);

	half4 r0;
	r0.a = gradient_max_color.a * tex.b * 8;
	r0.rgb = (gradient_min_color.a - tex.rgb) * 4;
	r0 = saturate(r0);

	half4 r1;
	r1.a = 1 - 2*r0.b;
	r1.rgb = (1 - r0.a) * gradient_min_color.rgb + r0.a * gradient_max_color.rgb;
	r1 = saturate(r1);

	half4 r2;
	// calc r2.a using non interpolated color
	r2.a = tex_point.b + 0.5  - flash_color.a;
	r2.rgb = r1.rgb + r1.a * flash_color.rgb;
	r2 = saturate(r2);
	
	half4 r3;
	r3.a = r2.a >= 0.5 ? background_color.a : tint_color.a;
	r3.rgb = r2.a >= 0.5 ? background_color.rgb : r2.rgb;
	
	half4 res;
	res.rgb = r3.rgb * tex.a;
	res.a = r3.a + (1 - r3.a) * saturate(alpha_min.a - tex.a) / alpha_min.a;

	res.rgb *= tint_color.rgb;

	return res;
};

